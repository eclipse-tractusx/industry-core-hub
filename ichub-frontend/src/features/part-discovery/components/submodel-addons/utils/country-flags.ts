/********************************************************************************
 * Eclipse Tractus-X - Industry Core Hub Frontend
 *
 * Copyright (c) 2025 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the
 * License for the specific language govern in permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/

/**
 * Comprehensive mapping of country codes and names to their flag emojis
 */
const COUNTRY_FLAG_MAP: Record<string, string> = {
  // North America
  'US': 'üá∫üá∏', 'USA': 'üá∫üá∏', 'United States': 'üá∫üá∏', 'United States of America': 'üá∫üá∏',
  'CA': 'üá®üá¶', 'CAN': 'üá®üá¶', 'Canada': 'üá®üá¶',
  'MX': 'üá≤üáΩ', 'MEX': 'üá≤üáΩ', 'Mexico': 'üá≤üáΩ',

  // Europe - Western
  'DE': 'üá©üá™', 'DEU': 'üá©üá™', 'Germany': 'üá©üá™', 'Deutschland': 'üá©üá™',
  'FR': 'üá´üá∑', 'FRA': 'üá´üá∑', 'France': 'üá´üá∑',
  'IT': 'üáÆüáπ', 'ITA': 'üáÆüáπ', 'Italy': 'üáÆüáπ',
  'GB': 'üá¨üáß', 'GBR': 'üá¨üáß', 'United Kingdom': 'üá¨üáß', 'UK': 'üá¨üáß', 'Britain': 'üá¨üáß',
  'ES': 'üá™üá∏', 'ESP': 'üá™üá∏', 'Spain': 'üá™üá∏',
  'NL': 'üá≥üá±', 'NLD': 'üá≥üá±', 'Netherlands': 'üá≥üá±', 'Holland': 'üá≥üá±',
  'BE': 'üáßüá™', 'BEL': 'üáßüá™', 'Belgium': 'üáßüá™',
  'CH': 'üá®üá≠', 'CHE': 'üá®üá≠', 'Switzerland': 'üá®üá≠',
  'AT': 'üá¶üáπ', 'AUT': 'üá¶üáπ', 'Austria': 'üá¶üáπ',
  'PT': 'üáµüáπ', 'PRT': 'üáµüáπ', 'Portugal': 'üáµüáπ',
  'IE': 'üáÆüá™', 'IRL': 'üáÆüá™', 'Ireland': 'üáÆüá™',
  'LU': 'üá±üá∫', 'LUX': 'üá±üá∫', 'Luxembourg': 'üá±üá∫',

  // Europe - Nordic
  'SE': 'üá∏üá™', 'SWE': 'üá∏üá™', 'Sweden': 'üá∏üá™',
  'NO': 'üá≥üá¥', 'NOR': 'üá≥üá¥', 'Norway': 'üá≥üá¥',
  'DK': 'üá©üá∞', 'DNK': 'üá©üá∞', 'Denmark': 'üá©üá∞',
  'FI': 'üá´üáÆ', 'FIN': 'üá´üáÆ', 'Finland': 'üá´üáÆ',

  // Europe - Eastern
  'PL': 'üáµüá±', 'POL': 'üáµüá±', 'Poland': 'üáµüá±',
  'CZ': 'üá®üáø', 'CZE': 'üá®üáø', 'Czech Republic': 'üá®üáø', 'Czechia': 'üá®üáø',
  'HU': 'üá≠üá∫', 'HUN': 'üá≠üá∫', 'Hungary': 'üá≠üá∫',
  'RO': 'üá∑üá¥', 'ROU': 'üá∑üá¥', 'Romania': 'üá∑üá¥',
  'SK': 'üá∏üá∞', 'SVK': 'üá∏üá∞', 'Slovakia': 'üá∏üá∞',
  'SI': 'üá∏üáÆ', 'SVN': 'üá∏üáÆ', 'Slovenia': 'üá∏üáÆ',
  'HR': 'üá≠üá∑', 'HRV': 'üá≠üá∑', 'Croatia': 'üá≠üá∑',
  'BG': 'üáßüá¨', 'BGR': 'üáßüá¨', 'Bulgaria': 'üáßüá¨',
  'GR': 'üá¨üá∑', 'GRC': 'üá¨üá∑', 'Greece': 'üá¨üá∑',
  'EE': 'üá™üá™', 'EST': 'üá™üá™', 'Estonia': 'üá™üá™',
  'LV': 'üá±üáª', 'LVA': 'üá±üáª', 'Latvia': 'üá±üáª',
  'LT': 'üá±üáπ', 'LTU': 'üá±üáπ', 'Lithuania': 'üá±üáπ',

  // Europe - Mediterranean
  'MT': 'üá≤üáπ', 'MLT': 'üá≤üáπ', 'Malta': 'üá≤üáπ',
  'CY': 'üá®üáæ', 'CYP': 'üá®üáæ', 'Cyprus': 'üá®üáæ',

  // Asia - East
  'CN': 'üá®üá≥', 'CHN': 'üá®üá≥', 'China': 'üá®üá≥', 'People\'s Republic of China': 'üá®üá≥',
  'JP': 'üáØüáµ', 'JPN': 'üáØüáµ', 'Japan': 'üáØüáµ',
  'KR': 'üá∞üá∑', 'KOR': 'üá∞üá∑', 'South Korea': 'üá∞üá∑', 'Korea': 'üá∞üá∑',
  'TW': 'üáπüáº', 'TWN': 'üáπüáº', 'Taiwan': 'üáπüáº',

  // Asia - Southeast
  'SG': 'üá∏üá¨', 'SGP': 'üá∏üá¨', 'Singapore': 'üá∏üá¨',
  'MY': 'üá≤üáæ', 'MYS': 'üá≤üáæ', 'Malaysia': 'üá≤üáæ',
  'TH': 'üáπüá≠', 'THA': 'üáπüá≠', 'Thailand': 'üáπüá≠',
  'VN': 'üáªüá≥', 'VNM': 'üáªüá≥', 'Vietnam': 'üáªüá≥',
  'PH': 'üáµüá≠', 'PHL': 'üáµüá≠', 'Philippines': 'üáµüá≠',
  'ID': 'üáÆüá©', 'IDN': 'üáÆüá©', 'Indonesia': 'üáÆüá©',

  // Asia - South
  'IN': 'üáÆüá≥', 'IND': 'üáÆüá≥', 'India': 'üáÆüá≥',

  // Asia - West/Middle East
  'RU': 'üá∑üá∫', 'RUS': 'üá∑üá∫', 'Russia': 'üá∑üá∫', 'Russian Federation': 'üá∑üá∫',
  'TR': 'üáπüá∑', 'TUR': 'üáπüá∑', 'Turkey': 'üáπüá∑', 'T√ºrkiye': 'üáπüá∑',
  'IL': 'üáÆüá±', 'ISR': 'üáÆüá±', 'Israel': 'üáÆüá±',
  'SA': 'üá∏üá¶', 'SAU': 'üá∏üá¶', 'Saudi Arabia': 'üá∏üá¶',
  'AE': 'üá¶üá™', 'ARE': 'üá¶üá™', 'UAE': 'üá¶üá™', 'United Arab Emirates': 'üá¶üá™',

  // Africa
  'ZA': 'üáøüá¶', 'ZAF': 'üáøüá¶', 'South Africa': 'üáøüá¶',
  'EG': 'üá™üá¨', 'EGY': 'üá™üá¨', 'Egypt': 'üá™üá¨',

  // Oceania
  'AU': 'üá¶üá∫', 'AUS': 'üá¶üá∫', 'Australia': 'üá¶üá∫',
  'NZ': 'üá≥üáø', 'NZL': 'üá≥üáø', 'New Zealand': 'üá≥üáø',

  // South America
  'BR': 'üáßüá∑', 'BRA': 'üáßüá∑', 'Brazil': 'üáßüá∑',
  'AR': 'üá¶üá∑', 'ARG': 'üá¶üá∑', 'Argentina': 'üá¶üá∑',
  'CL': 'üá®üá±', 'CHL': 'üá®üá±', 'Chile': 'üá®üá±',
  'CO': 'üá®üá¥', 'COL': 'üá®üá¥', 'Colombia': 'üá®üá¥',
  'PE': 'üáµüá™', 'PER': 'üáµüá™', 'Peru': 'üáµüá™',
  'VE': 'üáªüá™', 'VEN': 'üáªüá™', 'Venezuela': 'üáªüá™',
};

/**
 * Gets the flag emoji for a given country code or name
 * 
 * @param countryCode - Country code (ISO 2/3 letter) or full country name
 * @returns Flag emoji string, or default flag if not found
 * 
 * @example
 * ```typescript
 * getCountryFlag('US') // Returns 'üá∫üá∏'
 * getCountryFlag('Germany') // Returns 'üá©üá™'
 * getCountryFlag('unknown') // Returns 'üè≥Ô∏è'
 * ```
 */
export const getCountryFlag = (countryCode: string): string => {
  // Handle empty or invalid input
  if (!countryCode || typeof countryCode !== 'string') {
    return 'üè≥Ô∏è';
  }

  // Try exact match first
  if (COUNTRY_FLAG_MAP[countryCode]) {
    return COUNTRY_FLAG_MAP[countryCode];
  }

  // Try case-insensitive search
  const lowerCode = countryCode.toLowerCase();
  for (const [key, flag] of Object.entries(COUNTRY_FLAG_MAP)) {
    if (key.toLowerCase() === lowerCode) {
      return flag;
    }
  }

  // Try partial match for longer country names
  for (const [key, flag] of Object.entries(COUNTRY_FLAG_MAP)) {
    if (countryCode.toLowerCase().includes(key.toLowerCase()) || 
        key.toLowerCase().includes(countryCode.toLowerCase())) {
      return flag;
    }
  }

  return 'üè≥Ô∏è'; // Default flag for unknown countries
};

/**
 * Gets all available country codes and names that have flag mappings
 * 
 * @returns Array of country identifiers
 */
export const getAvailableCountries = (): string[] => {
  return Object.keys(COUNTRY_FLAG_MAP);
};

/**
 * Checks if a country has a flag mapping available
 * 
 * @param countryCode - Country code or name to check
 * @returns True if flag mapping exists
 */
export const hasCountryFlag = (countryCode: string): boolean => {
  return getCountryFlag(countryCode) !== 'üè≥Ô∏è';
};
