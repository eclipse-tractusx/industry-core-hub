#################################################################################
# Eclipse Tractus-X - Industry Core Hub Backend
#
# Copyright (c) 2025 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the
# License for the specific language govern in permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

"""initial version

Revision ID: f5fe4fbafac9
Revises: 
Create Date: 2025-05-14 15:13:00.621651

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = 'f5fe4fbafac9'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('business_partner',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('bpnl', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_business_partner_bpnl'), 'business_partner', ['bpnl'], unique=True)
    op.create_index(op.f('ix_business_partner_name'), 'business_partner', ['name'], unique=True)
    op.create_table('legal_entity',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('bpnl', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_legal_entity_bpnl'), 'legal_entity', ['bpnl'], unique=True)
    op.create_table('twin',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('global_id', sa.Uuid(), nullable=False),
    sa.Column('aas_id', sa.Uuid(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('modified_date', sa.DateTime(), nullable=False),
    sa.Column('asset_class', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('additional_context', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('global_id', name='uk_twin_global_id')
    )
    op.create_table('catalog_part',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('manufacturer_part_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('legal_entity_id', sa.BigInteger(), nullable=False),
    sa.Column('twin_id', sa.BigInteger(), nullable=True),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bpns', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['legal_entity_id'], ['legal_entity.id'], ),
    sa.ForeignKeyConstraint(['twin_id'], ['twin.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('twin_id')
    )
    op.create_index(op.f('ix_catalog_part_manufacturer_part_id'), 'catalog_part', ['manufacturer_part_id'], unique=True)
    op.create_table('data_exchange_agreement',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('business_partner_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['business_partner_id'], ['business_partner.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_data_exchange_agreement_name'), 'data_exchange_agreement', ['name'], unique=False)
    op.create_table('enablement_service_stack',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('connection_settings', sa.JSON(), nullable=True),
    sa.Column('legal_entity_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['legal_entity_id'], ['legal_entity.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_enablement_service_stack_name'), 'enablement_service_stack', ['name'], unique=True)
    op.create_table('twin_aspect',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('submodel_id', sa.Uuid(), nullable=False),
    sa.Column('semantic_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('twin_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['twin_id'], ['twin.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('submodel_id'),
    sa.UniqueConstraint('twin_id', 'semantic_id', name='uk_twin_aspect_twin_id_semantic_id')
    )
    op.create_table('batch',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('batch_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('catalog_part_id', sa.BigInteger(), nullable=False),
    sa.Column('twin_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['catalog_part_id'], ['catalog_part.id'], ),
    sa.ForeignKeyConstraint(['twin_id'], ['twin.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('catalog_part_id', 'batch_id', name='uq_catalog_batch_id'),
    sa.UniqueConstraint('twin_id', name='uk_batch_twin_id')
    )
    op.create_index(op.f('ix_batch_batch_id'), 'batch', ['batch_id'], unique=False)
    op.create_table('data_exchange_contract',
    sa.Column('data_exchange_agreement_id', sa.BigInteger(), nullable=False),
    sa.Column('semantic_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('edc_usage_policy_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['data_exchange_agreement_id'], ['data_exchange_agreement.id'], ),
    sa.PrimaryKeyConstraint('data_exchange_agreement_id', 'semantic_id')
    )
    op.create_table('partner_catalog_part',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('business_partner_id', sa.BigInteger(), nullable=False),
    sa.Column('catalog_part_id', sa.BigInteger(), nullable=False),
    sa.Column('customer_part_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['business_partner_id'], ['business_partner.id'], ),
    sa.ForeignKeyConstraint(['catalog_part_id'], ['catalog_part.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('business_partner_id', 'catalog_part_id', name='uq_partner_catalog_part')
    )
    op.create_table('twin_aspect_registration',
    sa.Column('twin_aspect_id', sa.BigInteger(), nullable=False),
    sa.Column('enablement_service_stack_id', sa.BigInteger(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('registration_mode', sa.Integer(), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('modified_date', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['enablement_service_stack_id'], ['enablement_service_stack.id'], ),
    sa.ForeignKeyConstraint(['twin_aspect_id'], ['twin_aspect.id'], ),
    sa.PrimaryKeyConstraint('twin_aspect_id', 'enablement_service_stack_id')
    )
    op.create_table('twin_exchange',
    sa.Column('twin_id', sa.BigInteger(), nullable=False),
    sa.Column('data_exchange_agreement_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['data_exchange_agreement_id'], ['data_exchange_agreement.id'], ),
    sa.ForeignKeyConstraint(['twin_id'], ['twin.id'], ),
    sa.PrimaryKeyConstraint('twin_id', 'data_exchange_agreement_id')
    )
    op.create_table('twin_registration',
    sa.Column('twin_id', sa.BigInteger(), nullable=False),
    sa.Column('enablement_service_stack_id', sa.BigInteger(), nullable=False),
    sa.Column('dtr_registered', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['enablement_service_stack_id'], ['enablement_service_stack.id'], ),
    sa.ForeignKeyConstraint(['twin_id'], ['twin.id'], ),
    sa.PrimaryKeyConstraint('twin_id', 'enablement_service_stack_id')
    )
    op.create_table('batch_business_partner',
    sa.Column('batch_id', sa.BigInteger(), nullable=False),
    sa.Column('business_partner_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['batch_id'], ['batch.id'], ),
    sa.ForeignKeyConstraint(['business_partner_id'], ['business_partner.id'], ),
    sa.PrimaryKeyConstraint('batch_id', 'business_partner_id')
    )
    op.create_table('jis_part',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('partner_catalog_part_id', sa.BigInteger(), nullable=False),
    sa.Column('jis_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('parent_order_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('jis_call_date', sa.DateTime(), nullable=True),
    sa.Column('twin_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['partner_catalog_part_id'], ['partner_catalog_part.id'], ),
    sa.ForeignKeyConstraint(['twin_id'], ['twin.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('jis_number', 'partner_catalog_part_id', name='uk_jis_part_partner_catalog_part_id_jis_number'),
    sa.UniqueConstraint('twin_id', name='uk_jis_part_twin_id')
    )
    op.create_table('serialized_part',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('partner_catalog_part_id', sa.BigInteger(), nullable=False),
    sa.Column('part_instance_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('van', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('twin_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['partner_catalog_part_id'], ['partner_catalog_part.id'], ),
    sa.ForeignKeyConstraint(['twin_id'], ['twin.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('part_instance_id', 'partner_catalog_part_id', name='uk_serialized_part_partner_catalog_part_id_part_instance_id'),
    sa.UniqueConstraint('twin_id', name='uk_serialized_part_twin_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('serialized_part')
    op.drop_table('jis_part')
    op.drop_table('batch_business_partner')
    op.drop_table('twin_registration')
    op.drop_table('twin_exchange')
    op.drop_table('twin_aspect_registration')
    op.drop_table('partner_catalog_part')
    op.drop_table('data_exchange_contract')
    op.drop_index(op.f('ix_batch_batch_id'), table_name='batch')
    op.drop_table('batch')
    op.drop_table('twin_aspect')
    op.drop_index(op.f('ix_enablement_service_stack_name'), table_name='enablement_service_stack')
    op.drop_table('enablement_service_stack')
    op.drop_index(op.f('ix_data_exchange_agreement_name'), table_name='data_exchange_agreement')
    op.drop_table('data_exchange_agreement')
    op.drop_index(op.f('ix_catalog_part_manufacturer_part_id'), table_name='catalog_part')
    op.drop_table('catalog_part')
    op.drop_table('twin')
    op.drop_index(op.f('ix_legal_entity_bpnl'), table_name='legal_entity')
    op.drop_table('legal_entity')
    op.drop_index(op.f('ix_business_partner_name'), table_name='business_partner')
    op.drop_index(op.f('ix_business_partner_bpnl'), table_name='business_partner')
    op.drop_table('business_partner')
    # ### end Alembic commands ###
