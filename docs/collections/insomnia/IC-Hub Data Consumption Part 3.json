{"_type":"export","__export_format":4,"__export_date":"2025-05-22T06:34:01.624Z","__export_source":"insomnia.desktop.app:v10.2.0","resources":[{"_id":"req_940a22972de248a8aab93e7b9c78e178","parentId":"fld_46d00ce382034f05954e2f1492bc3532","modified":1747895409469,"created":1747895409469,"url":"{{_['your-connector-url']}}/management/v3/catalog/request","name":"1.1. [DSP] Find Available Digital Twin Registries (AAS-REST)","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"@context\": {\n    \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"odrl\": \"https://www.w3.org/ns/odrl/2/\",\n    \"dct\": \"http://purl.org/dc/terms/\",\n    \"cx-taxo\": \"https://w3id.org/catenax/taxonomy\"\n  },\n  \"@type\": \"edc:CatalogRequest\",\n  \"counterPartyAddress\": \"{{_['provider-connector-url']}}/api/v1/dsp\",\n  \"counterPartyId\": \"{{_['provider-bpnl']}}\",\n  \"protocol\": \"dataspace-protocol-http\",\n      \"querySpec\": {\n        \"filterExpression\": [\n            {\n                \"operandLeft\": \"'http://purl.org/dc/terms/type'.'@id'\",\n                \"operator\": \"=\",\n                \"operandRight\": \"https://w3id.org/catenax/taxonomy#DigitalTwinRegistry\"\n            }\n        ]\n    }\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407628,"isPrivate":false,"afterResponseScript":"const jsonResponse = insomnia.response.json();\nif ( jsonResponse[\"dcat:dataset\"] instanceof Object )\n{\n    insomnia.collectionVariables.set(\"offerId\", jsonResponse[\"dcat:dataset\"][\"odrl:hasPolicy\"][\"@id\"]);\n    insomnia.collectionVariables.set(\"offerAssetId\", jsonResponse[\"dcat:dataset\"][\"@id\"]);\n    // extract permissions, probihitions and obligations\n    insomnia.collectionVariables.set(\"contractPermissions\", JSON.stringify(jsonResponse[\"dcat:dataset\"][\"odrl:hasPolicy\"][\"odrl:permission\"]));\n    insomnia.collectionVariables.set(\"contractProhibitions\", JSON.stringify(jsonResponse[\"dcat:dataset\"][\"odrl:hasPolicy\"][\"odrl:prohibition\"]));\n    insomnia.collectionVariables.set(\"contractObligations\", JSON.stringify(jsonResponse[\"dcat:dataset\"][\"odrl:hasPolicy\"][\"odrl:obligation\"]));\n}\nelse{\n\n    insomnia.collectionVariables.set(\"offerId\", jsonResponse[\"dcat:dataset\"][0][\"odrl:hasPolicy\"][\"@id\"]);\n    insomnia.collectionVariables.set(\"offerAssetId\", jsonResponse[\"dcat:dataset\"][0][\"@id\"]);\n    // extract permissions, probihitions and obligations\n    insomnia.collectionVariables.set(\"contractPermissions\", JSON.stringify(jsonResponse[\"dcat:dataset\"][0][\"odrl:hasPolicy\"][\"odrl:permission\"]));\n    insomnia.collectionVariables.set(\"contractProhibitions\", JSON.stringify(jsonResponse[\"dcat:dataset\"][0][\"odrl:hasPolicy\"][\"odrl:prohibition\"]));\n    insomnia.collectionVariables.set(\"contractObligations\", JSON.stringify(jsonResponse[\"dcat:dataset\"][0][\"odrl:hasPolicy\"][\"odrl:obligation\"]));\n}\n\nvar permissions = insomnia.collectionVariables.get(\"contractPermissions\");\nvar prohibitions = insomnia.collectionVariables.get(\"contractProhibitions\");\nvar obligations = insomnia.collectionVariables.get(\"contractObligations\");\n\nif (permissions.length == 0)\n    insomnia.collectionVariables.set(\"contractPermissions\", \"[]\");\n\nif (prohibitions.length == 0)\n    insomnia.collectionVariables.set(\"contractProhibitions\", \"[]\");\n\nif (obligations.length == 0)\n    insomnia.collectionVariables.set(\"contractObligations\", \"[]\");","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_46d00ce382034f05954e2f1492bc3532","parentId":"fld_c4a5064eafaf40aa81ae51e5dc54afd7","modified":1747895409468,"created":1747895409468,"name":"1. Connect to Digital Twin Registry (AAS-REST) (one time)","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1747895407629,"preRequestScript":"","afterResponseScript":"","authentication":{},"_type":"request_group"},{"_id":"fld_c4a5064eafaf40aa81ae51e5dc54afd7","parentId":"wrk_53239376e3594958b21cf6a1d7883ca5","modified":1747895409467,"created":1747895409467,"name":"IC-Hub Data Consumption Part 3","description":"","environment":{"provider-connector-url":"https://edc-provider-ichub-control.int.catena-x.net","provider-bpnl":"BPNL0000000093Q7","your-connector-url":"https://edc-consumer-ichub-control.int.catena-x.net","your-bpnl":"BPNL00000003CRHK","connector-api-key":"ACA176440A8BDD3954FCEC3552BF8985AFB75608A57B9121EA809791854AAA2BEDBF85333572E8DECE9537D69697D6BA28EA26174085242CB536B7877E219CAC","offerId":"","offerAssetId":"","contractPermissions":"","contractProhibitions":"","contractObligations":"","negotiationId":"","contractAgreementId":"","transferProcessId":"","jwtToken":"","provider-connector-dataplane-proxy":"","offerId2":"","offerAssetId2":"","contractPermissions2":"","contractProhibitions2":"","contractObligations2":"","negotiationId2":"","contractAgreementId2":"","transferProcessId2":"","jwtToken2":"","provider-connector-dataplane-proxy2":""},"environmentPropertyOrder":null,"metaSortKey":-1747895407630,"preRequestScript":"","afterResponseScript":"","authentication":{"type":"apikey","key":"X-Api-Key","value":"{{connector-api-key}}","addTo":"header","disabled":false},"_type":"request_group"},{"_id":"wrk_53239376e3594958b21cf6a1d7883ca5","parentId":null,"modified":1747895409465,"created":1747895409465,"name":"IC-Hub Data Consumption Part 3","description":"","scope":"collection","_type":"workspace"},{"_id":"req_f6ce56d0c57e434f932084398a08e979","parentId":"fld_46d00ce382034f05954e2f1492bc3532","modified":1747895409470,"created":1747895409470,"url":"{{_['your-connector-url']}}/management/v2/edrs","name":"1.2 [EDR] Accept Offer & Select Policy","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"@context\": [\n        \"https://w3id.org/tractusx/policy/v1.0.0\",\n        \"http://www.w3.org/ns/odrl.jsonld\",\n        {\n            \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n        }\n    ],\n    \"@type\": \"ContractRequest\",\n    \"counterPartyAddress\": \"{{_['provider-connector-url']}}/api/v1/dsp\",\n    \"protocol\": \"dataspace-protocol-http\",\n    \"policy\": {\n        \"@type\": \"odrl:Offer\",\n        \"assigner\": \"{{_['provider-bpnl']}}\",\n        \"target\": \"{{_['offerAssetId']}}\",\n        \"@id\": \"{{_['offerId']}}\",\n        \"odrl:permission\": {{_['contractPermissions']}},\n        \"odrl:prohibition\": {{_['contractProhibitions']}},\n        \"odrl:obligation\": {{_['contractObligations']}}\n    }\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407627,"isPrivate":false,"afterResponseScript":"insomnia.test(\"Body matches string\", function () {\n    var jsonData = insomnia.response.json();\n    insomnia.collectionVariables.set(\"negotiationId\", jsonData[\"@id\"]);\n\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_c40ece360336432bb795ce3d72c1fe08","parentId":"fld_46d00ce382034f05954e2f1492bc3532","modified":1747895409470,"created":1747895409470,"url":"{{_['your-connector-url']}}/management/v3/contractnegotiations/{{_['negotiationId']}}","name":"1.3 [EDR] View Negotiation Status","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407626,"isPrivate":false,"afterResponseScript":"insomnia.test(\"Negotiation status check\", function () {\n    insomnia.expect(insomnia.response.code).to.equal(200);\n    insomnia.expect(insomnia.response.json().state).to.equal(\"FINALIZED\");\n    var jsonData = insomnia.response.json();\n    if(jsonData[\"state\"] == \"FINALIZED\"){\n        insomnia.collectionVariables.set(\"contractAgreementId\", jsonData[\"contractAgreementId\"]);\n    }\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_62d93a15110b46aeb4b42b2f95a34367","parentId":"fld_46d00ce382034f05954e2f1492bc3532","modified":1747895409471,"created":1747895409471,"url":"{{_['your-connector-url']}}/management/v3/contractagreements/{{_['contractAgreementId']}}","name":"1.4 [EDR] [IF FINALIZED] View Agreement","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407625,"isPrivate":false,"afterResponseScript":"","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9af0d41b7d70434eb96b0cf6ca8a40d4","parentId":"fld_46d00ce382034f05954e2f1492bc3532","modified":1747895409471,"created":1747895409471,"url":"{{_['your-connector-url']}}/management/v2/edrs/request","name":"1.5 [EDR] Get TransferProcessId","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"@type\": \"QuerySpec\",\n    \"filterExpression\": [\n        {\n            \"operandLeft\": \"contractNegotiationId\",\n            \"operator\": \"=\",\n            \"operandRight\": \"{{negotiationId}}\"\n        }\n    ]\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407624,"isPrivate":false,"afterResponseScript":"let jsonData = insomnia.response.json();\n// Store the transferProcessId in a collection variable\ninsomnia.collectionVariables.set(\"transferProcessId\", jsonData[0].transferProcessId);\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ce2e3f5105b34c51a80f994dbe02936d","parentId":"fld_4eb4bfb978c245ad869d52de655daef5","modified":1747895409472,"created":1747895409472,"url":"{{_['provider-connector-dataplane-proxy']}}/shell-descriptors","name":"2.1. Query Digital Twin Registry APIs (ALL)","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"oauth2","disabled":false,"pkceMethod":"","state":"","scope":"","tokenPrefix":"","credentialsInBody":false,"accessTokenUrl":"","authorizationUrl":"","grantType":"authorization_code","password":"","username":"","clientId":"","clientSecret":"","redirectUrl":""},"preRequestScript":"// Define the URL dynamically using environment/collection variables\nconst url = `${insomnia.collectionVariables.get(\"your-connector-url\")}/management/v2/edrs/${insomnia.collectionVariables.get(\"transferProcessId\")}/dataaddress?auto_refresh=true`;\nconst apiKey = insomnia.collectionVariables.get(\"connector-api-key\"); // Assuming this is where your API key is stored\n\ninsomnia.sendRequest({\n    url: url,\n    method: 'GET',\n    header: [\n        { key: 'Content-Type', value: 'application/json' },\n        { key: 'X-Api-Key', value: apiKey }\n    ]\n}, function (err, res) {\n    if (err) {\n        console.error('Request error:', err);\n    \n        return;\n    }\n\n    try {\n        const jsonData = res.json();\n        console.log(jsonData)\n        insomnia.collectionVariables.set(\"jwtToken\", jsonData[\"authorization\"]);\n        insomnia.collectionVariables.set(\"provider-connector-dataplane-proxy\", jsonData[\"endpoint\"]);\n        console.log(\"Token and endpoint set successfully.\");\n    } catch (parseError) {\n        console.error(\"Failed to parse JSON response:\", parseError);\n    }\n});","metaSortKey":-1747895407622,"isPrivate":false,"afterResponseScript":"","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_4eb4bfb978c245ad869d52de655daef5","parentId":"fld_c4a5064eafaf40aa81ae51e5dc54afd7","modified":1747895409472,"created":1747895409472,"name":"2. Query Digital Twin Registry (reusable open connection)","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1747895407623,"preRequestScript":"","afterResponseScript":"","authentication":{},"_type":"request_group"},{"_id":"req_5a30c5a883cb428f9e05afcc5b44d77c","parentId":"fld_4eb4bfb978c245ad869d52de655daef5","modified":1747895409472,"created":1747895409472,"url":"{{_['provider-connector-dataplane-proxy']}}/lookup/shellsByAssetLink","name":"2.2. Discover Your AAS (Digital Twins)","description":"","method":"POST","body":{"mimeType":"application/json","text":"[\n    {\n      \"name\": \"customerPartId\",\n      \"value\": \"BPNL00000003CRHK_TX-VST-8821\"\n    }\n]   "},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{"type":"oauth2","disabled":false,"pkceMethod":"","state":"","scope":"","tokenPrefix":"","credentialsInBody":false,"accessTokenUrl":"","authorizationUrl":"","grantType":"authorization_code","password":"","username":"","clientId":"","clientSecret":"","redirectUrl":""},"preRequestScript":"// Define the URL dynamically using environment/collection variables\nconst url = `${insomnia.collectionVariables.get(\"your-connector-url\")}/management/v2/edrs/${insomnia.collectionVariables.get(\"transferProcessId\")}/dataaddress?auto_refresh=true`;\nconst apiKey = insomnia.collectionVariables.get(\"connector-api-key\"); // Assuming this is where your API key is stored\n\ninsomnia.sendRequest({\n    url: url,\n    method: 'GET',\n    header: [\n        { key: 'Content-Type', value: 'application/json' },\n        { key: 'X-Api-Key', value: apiKey }\n    ]\n}, function (err, res) {\n    if (err) {\n        console.error('Request error:', err);\n    \n        return;\n    }\n\n    try {\n        const jsonData = res.json();\n        console.log(jsonData)\n        insomnia.collectionVariables.set(\"jwtToken\", jsonData[\"authorization\"]);\n        insomnia.collectionVariables.set(\"provider-connector-dataplane-proxy\", jsonData[\"endpoint\"]);\n        console.log(\"Token and endpoint set successfully.\");\n    } catch (parseError) {\n        console.error(\"Failed to parse JSON response:\", parseError);\n    }\n});","metaSortKey":-1747895407621,"isPrivate":false,"afterResponseScript":"// Parse response JSON\nlet jsonData = insomnia.response.json();\n\n// Get the first AAS ID\nlet firstAASId = jsonData.result && jsonData.result.length > 0 ? jsonData.result[0] : null;\n\nif (firstAASId) {\n    // Base64 encode\n    let encoded = Buffer.from(firstAASId).toString('base64');\n\n    // Store in variable\n    insomnia.environment.set(\"encoded_aas_id\", encoded);\n    console.log(\"Base64-encoded AAS ID:\", encoded);\n} else {\n    console.warn(\"No AAS ID found in the result array.\");\n}","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_55605330b2094965a9ac47ab7702a4a9","parentId":"fld_4eb4bfb978c245ad869d52de655daef5","modified":1747895409472,"created":1747895409472,"url":"{{_['provider-connector-dataplane-proxy']}}/shell-descriptors/{{_['encoded_aas_id']}}","name":"2.3. Get your AAS","description":"","method":"GET","body":{},"parameters":[{"name":"","value":"","disabled":true}],"headers":[],"authentication":{"type":"oauth2","disabled":false,"pkceMethod":"","state":"","scope":"","tokenPrefix":"","credentialsInBody":false,"accessTokenUrl":"","authorizationUrl":"","grantType":"authorization_code","password":"","username":"","clientId":"","clientSecret":"","redirectUrl":""},"preRequestScript":"// Define the URL dynamically using environment/collection variables\nconst url = `${insomnia.collectionVariables.get(\"your-connector-url\")}/management/v2/edrs/${insomnia.collectionVariables.get(\"transferProcessId\")}/dataaddress?auto_refresh=true`;\nconst apiKey = insomnia.collectionVariables.get(\"connector-api-key\"); // Assuming this is where your API key is stored\n\ninsomnia.sendRequest({\n    url: url,\n    method: 'GET',\n    header: [\n        { key: 'Content-Type', value: 'application/json' },\n        { key: 'X-Api-Key', value: apiKey }\n    ]\n}, function (err, res) {\n    if (err) {\n        console.error('Request error:', err);\n    \n        return;\n    }\n\n    try {\n        const jsonData = res.json();\n        console.log(jsonData)\n        insomnia.collectionVariables.set(\"jwtToken\", jsonData[\"authorization\"]);\n        insomnia.collectionVariables.set(\"provider-connector-dataplane-proxy\", jsonData[\"endpoint\"]);\n        console.log(\"Token and endpoint set successfully.\");\n    } catch (parseError) {\n        console.error(\"Failed to parse JSON response:\", parseError);\n    }\n});","metaSortKey":-1747895407620,"isPrivate":false,"afterResponseScript":"let jsonData = insomnia.response.json();\n\n// 1. Extract manufacturerId\nif (jsonData.specificAssetIds) {\n    let manufacturerId = jsonData.specificAssetIds.find(asset => asset.name === \"manufacturerId\")?.value;\n    if (manufacturerId) {\n        insomnia.environment.set(\"manufacturer_id\", manufacturerId);\n        console.log(\"Manufacturer ID:\", manufacturerId);\n    }\n}\n\n// 2. Extract subprotocolBody string\nlet subprotocolBody = jsonData.submodelDescriptors?.[0]?.endpoints?.[0]?.protocolInformation?.subprotocolBody;\nif (subprotocolBody) {\n    // Extract `id` and `dspEndpoint` using regex\n    let idMatch = subprotocolBody.match(/id=([^;]+)/);\n    let dspMatch = subprotocolBody.match(/dspEndpoint=(.+)$/);\n\n    if (idMatch && idMatch[1]) {\n        insomnia.environment.set(\"subprotocol_body_id\", idMatch[1]);\n        console.log(\"Subprotocol Body ID:\", idMatch[1]);\n    }\n\n    if (dspMatch && dspMatch[1]) {\n        insomnia.environment.set(\"dsp_endpoint\", dspMatch[1]);\n        console.log(\"DSP Endpoint:\", dspMatch[1]);\n    }\n}\n\nlet href = jsonData.submodelDescriptors?.[0]?.endpoints?.[0]?.protocolInformation?.href;\nif (href) {\n     insomnia.environment.set(\"href\", href);\n}","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e5a7833c35c445b888e50d93b20fbca0","parentId":"fld_f59e082ddff84cffb22258d947ec6d7e","modified":1747895409473,"created":1747895409473,"url":"{{_['your-connector-url']}}/management/v3/catalog/request","name":"3.1. [DSP] Find the Submodel Offer from Digital Twin","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"@context\": {\n    \"edc\": \"https://w3id.org/edc/v0.0.1/ns/\",\n    \"odrl\": \"https://www.w3.org/ns/odrl/2/\",\n    \"dct\": \"http://purl.org/dc/terms/\",\n    \"cx-taxo\": \"https://w3id.org/catenax/taxonomy\"\n  },\n  \"@type\": \"edc:CatalogRequest\",\n  \"counterPartyAddress\": \"{{_['dsp_endpoint']}}\",\n  \"counterPartyId\": \"{{_['manufacturer_id']}}\",\n  \"protocol\": \"dataspace-protocol-http\",\n      \"querySpec\": {\n        \"filterExpression\": [\n            {\n                \"operandLeft\": \"https://w3id.org/edc/v0.0.1/ns/id\",\n                \"operator\": \"=\",\n                \"operandRight\": \"{{_['subprotocol_body_id']}}\"\n            }\n        ]\n    }\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407618,"isPrivate":false,"afterResponseScript":"const jsonResponse = insomnia.response.json();\nif ( jsonResponse[\"dcat:dataset\"] instanceof Object )\n{\n    insomnia.collectionVariables.set(\"offerId2\", jsonResponse[\"dcat:dataset\"][\"odrl:hasPolicy\"][\"@id\"]);\n    insomnia.collectionVariables.set(\"offerAssetId2\", jsonResponse[\"dcat:dataset\"][\"@id\"]);\n    // extract permissions, probihitions and obligations\n    insomnia.collectionVariables.set(\"contractPermissions2\", JSON.stringify(jsonResponse[\"dcat:dataset\"][\"odrl:hasPolicy\"][\"odrl:permission\"]));\n    insomnia.collectionVariables.set(\"contractProhibitions2\", JSON.stringify(jsonResponse[\"dcat:dataset\"][\"odrl:hasPolicy\"][\"odrl:prohibition\"]));\n    insomnia.collectionVariables.set(\"contractObligations2\", JSON.stringify(jsonResponse[\"dcat:dataset\"][\"odrl:hasPolicy\"][\"odrl:obligation\"]));\n}\nelse{\n\n    insomnia.collectionVariables.set(\"offerId2\", jsonResponse[\"dcat:dataset\"][0][\"odrl:hasPolicy\"][\"@id\"]);\n    insomnia.collectionVariables.set(\"offerAssetId2\", jsonResponse[\"dcat:dataset\"][0][\"@id\"]);\n    // extract permissions, probihitions and obligations\n    insomnia.collectionVariables.set(\"contractPermissions2\", JSON.stringify(jsonResponse[\"dcat:dataset\"][0][\"odrl:hasPolicy\"][\"odrl:permission\"]));\n    insomnia.collectionVariables.set(\"contractProhibitions2\", JSON.stringify(jsonResponse[\"dcat:dataset\"][0][\"odrl:hasPolicy\"][\"odrl:prohibition\"]));\n    insomnia.collectionVariables.set(\"contractObligations2\", JSON.stringify(jsonResponse[\"dcat:dataset\"][0][\"odrl:hasPolicy\"][\"odrl:obligation\"]));\n}\n\nvar permissions = insomnia.collectionVariables.get(\"contractPermissions2\");\nvar prohibitions = insomnia.collectionVariables.get(\"contractProhibitions2\");\nvar obligations = insomnia.collectionVariables.get(\"contractObligations2\");\n\nif (permissions.length == 0)\n    insomnia.collectionVariables.set(\"contractPermissions2\", \"[]\");\n\nif (prohibitions.length == 0)\n    insomnia.collectionVariables.set(\"contractProhibitions2\", \"[]\");\n\nif (obligations.length == 0)\n    insomnia.collectionVariables.set(\"contractObligations2\", \"[]\");","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_f59e082ddff84cffb22258d947ec6d7e","parentId":"fld_c4a5064eafaf40aa81ae51e5dc54afd7","modified":1747895409473,"created":1747895409473,"name":"3. Connect to IC-HUB Backend (one time)","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1747895407619,"preRequestScript":"","afterResponseScript":"","authentication":{},"_type":"request_group"},{"_id":"req_93066ff9b2b246d38f15865f2acda015","parentId":"fld_f59e082ddff84cffb22258d947ec6d7e","modified":1747895409473,"created":1747895409473,"url":"{{_['your-connector-url']}}/management/v2/edrs","name":"3.2 [EDR] Accept Offer & Select Policy","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"@context\": [\n        \"https://w3id.org/tractusx/policy/v1.0.0\",\n        \"http://www.w3.org/ns/odrl.jsonld\",\n        {\n            \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n        }\n    ],\n    \"@type\": \"ContractRequest\",\n    \"counterPartyAddress\": \"{{_['dsp_endpoint']}}\",\n    \"protocol\": \"dataspace-protocol-http\",\n    \"policy\": {\n        \"@type\": \"odrl:Offer\",\n        \"assigner\": \"{{_['manufacturer_id']}}\",\n        \"target\": \"{{_['offerAssetId2']}}\",\n        \"@id\": \"{{_['offerId2']}}\",\n        \"odrl:permission\": {{_['contractPermissions2']}},\n        \"odrl:prohibition\": {{_['contractProhibitions2']}},\n        \"odrl:obligation\": {{_['contractObligations2']}}\n    }\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407617,"isPrivate":false,"afterResponseScript":"insomnia.test(\"Body matches string\", function () {\n    var jsonData = insomnia.response.json();\n    insomnia.collectionVariables.set(\"negotiationId2\", jsonData[\"@id\"]);\n\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_19025aab4f674699b9f04a9e61cabf12","parentId":"fld_f59e082ddff84cffb22258d947ec6d7e","modified":1747895409474,"created":1747895409474,"url":"{{_['your-connector-url']}}/management/v3/contractnegotiations/{{_['negotiationId2']}}","name":"3.3 [EDR] View Negotiation Status","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407616,"isPrivate":false,"afterResponseScript":"insomnia.test(\"Negotiation status check\", function () {\n    insomnia.expect(insomnia.response.code).to.equal(200);\n    insomnia.expect(insomnia.response.json().state).to.equal(\"FINALIZED\");\n    var jsonData = insomnia.response.json();\n    if(jsonData[\"state\"] == \"FINALIZED\"){\n        insomnia.collectionVariables.set(\"contractAgreementId2\", jsonData[\"contractAgreementId\"]);\n    }\n});","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e6f6cd14291f4d7fa789592a4da4d8a2","parentId":"fld_f59e082ddff84cffb22258d947ec6d7e","modified":1747895409474,"created":1747895409474,"url":"{{_['your-connector-url']}}/management/v3/contractagreements/{{_['contractAgreementId2']}}","name":"3.4 [EDR] [IF FINALIZED] View Agreement","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407615,"isPrivate":false,"afterResponseScript":"","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ff70b96f29914dc2b19ad9afb0b9bd82","parentId":"fld_f59e082ddff84cffb22258d947ec6d7e","modified":1747895409474,"created":1747895409474,"url":"{{_['your-connector-url']}}/management/v2/edrs/request","name":"3.5 [EDR] Get TransferProcessId","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n    \"@context\": {\n        \"@vocab\": \"https://w3id.org/edc/v0.0.1/ns/\"\n    },\n    \"@type\": \"QuerySpec\",\n    \"filterExpression\": [\n        {\n            \"operandLeft\": \"contractNegotiationId\",\n            \"operator\": \"=\",\n            \"operandRight\": \"{{negotiationId2}}\"\n        }\n    ]\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"preRequestScript":"","metaSortKey":-1747895407614,"isPrivate":false,"afterResponseScript":"let jsonData = insomnia.response.json();\n// Store the transferProcessId in a collection variable\ninsomnia.collectionVariables.set(\"transferProcessId2\", jsonData[0].transferProcessId);\n","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_30e168687a56451782951c5a73399cd3","parentId":"fld_eb714683ed944e9381e16793ed231d04","modified":1747895409474,"created":1747895409474,"url":"{{href}}","name":"4.1. Call HREF","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"oauth2","disabled":false,"pkceMethod":"","state":"","scope":"","tokenPrefix":"","credentialsInBody":false,"accessTokenUrl":"","authorizationUrl":"","grantType":"authorization_code","password":"","username":"","clientId":"","clientSecret":"","redirectUrl":""},"preRequestScript":"// Define the URL dynamically using environment/collection variables\nconst url = `${insomnia.collectionVariables.get(\"your-connector-url\")}/management/v2/edrs/${insomnia.collectionVariables.get(\"transferProcessId2\")}/dataaddress?auto_refresh=true`;\nconst apiKey = insomnia.collectionVariables.get(\"connector-api-key\"); // Assuming this is where your API key is stored\n\ninsomnia.sendRequest({\n    url: url,\n    method: 'GET',\n    header: [\n        { key: 'Content-Type', value: 'application/json' },\n        { key: 'X-Api-Key', value: apiKey }\n    ]\n}, function (err, res) {\n    if (err) {\n        console.error('Request error:', err);\n    \n        return;\n    }\n\n    try {\n        const jsonData = res.json();\n        console.log(jsonData)\n        insomnia.collectionVariables.set(\"jwtToken2\", jsonData[\"authorization\"]);\n        insomnia.collectionVariables.set(\"provider-connector-dataplane-proxy2\", jsonData[\"endpoint\"]);\n        console.log(\"Token and endpoint set successfully.\");\n    } catch (parseError) {\n        console.error(\"Failed to parse JSON response:\", parseError);\n    }\n});","metaSortKey":-1747895407612,"isPrivate":false,"afterResponseScript":"","settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_eb714683ed944e9381e16793ed231d04","parentId":"fld_c4a5064eafaf40aa81ae51e5dc54afd7","modified":1747895409474,"created":1747895409474,"name":"4. Get Data (reusable open connection)","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1747895407613,"preRequestScript":"","afterResponseScript":"","authentication":{},"_type":"request_group"},{"_id":"env_73b11f6ec09a813abcaad675657d74ab84317617","parentId":"wrk_53239376e3594958b21cf6a1d7883ca5","modified":1747895412495,"created":1747895412495,"name":"Base Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1747895412495,"environmentType":"kv","_type":"environment"},{"_id":"jar_73b11f6ec09a813abcaad675657d74ab84317617","parentId":"wrk_53239376e3594958b21cf6a1d7883ca5","modified":1747895412505,"created":1747895412505,"name":"Default Jar","cookies":[],"_type":"cookie_jar"}]}